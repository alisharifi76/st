/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 16:05:43 GMT 2022
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Library;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Library library0 = new Library();
      library0.addStudentMember("KmaSt0e~<Se)VF", "KmaSt0e~<Se)VF");
      try { 
        library0.addProfMember("KmaSt0e~<Se)VF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Member with the same name exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("4<c0HW{M&E|D]-{", 1706);
      try { 
        library0.addBook("4<c0HW{M&E|D]-{", 296);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document with the same title exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Library library0 = new Library();
      library0.addStudentMember("Cannt extendon the same day borowed", (String) null);
      library0.addBook("Cannt extendon the same day borowed", 13995);
      library0.addStudentMember("Cannt extendon the same day borowed", "Cannt extendon the same day borowed");
      library0.borrow("Cannt extendon the same day borowed", "Cannt extendon the same day borowed");
      library0.borrow((String) null, "Cannt extendon the same day borowed");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argument to loan constructor", 1);
      library0.addStudentMember("Invalid argument to loan constructor", "Invalid argument to loan constructor");
      library0.borrow("Invalid argument to loan constructor", "Invalid argument to loan constructor");
      try { 
        library0.extend("Invalid argument to loan constructor", "E");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Library library0 = new Library();
      library0.addStudentMember("Cannt extendon the same day borowed", (String) null);
      library0.addBook("Cannt extendon the same day borowed", 13995);
      library0.borrow((String) null, "Cannt extendon the same day borowed");
      try { 
        library0.returnDocument("Cannt extendon the same day borowed", "Cannt extendon the same day borowed");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argumenttoloan construco", 54);
      library0.addStudentMember("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      library0.borrow("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      library0.addStudentMember("Invalid argumenttoloan construco", "Document is not available to borrow");
      int int0 = library0.getTotalPenalty("Document is not available to borrow");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argumenttoloan construco", 54);
      library0.addStudentMember("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      library0.borrow("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      int int0 = library0.getTotalPenalty("Invalid argumenttoloan construco");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.timePass((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot go back in time
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Library library0 = new Library();
      library0.timePass(54);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.getTotalPenalty("u>jG$Vn#Ou");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argumenttoloan construco", 54);
      library0.addStudentMember("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      library0.borrow("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      try { 
        library0.extend("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argument to loan constructor", 1);
      library0.addStudentMember("Invalid argument to loan constructor", "Invalid argument to loan constructor");
      library0.borrow("Invalid argument to loan constructor", "Invalid argument to loan constructor");
      List<String> list0 = library0.availableTitles();
      assertFalse(list0.contains("Invalid argument to loan constructor"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argument to loan constructor", 1);
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.contains("Invalid argument to loan constructor"));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argumenttoloan construco", 26);
      library0.addStudentMember("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      library0.borrow("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      library0.borrow("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
      try { 
        library0.borrow("Invalid argumenttoloan construco", "Invalid argumenttoloan construco");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot borrow more documents
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("yZz", 1);
      library0.addStudentMember("yZz", "yZz");
      library0.borrow("yZz", "yZz");
      try { 
        library0.borrow("yZz", "yZz");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document is not available to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Invalid argumenttoloan construco", 26);
      try { 
        library0.borrow("go", "Invalid argumenttoloan construco");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.borrow("DQ5@C_2F0,fjr_U", "ir.ramtung.impl1.Library");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find document to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addMagazine("ir.ramtung.impl1.Member", (-1022), (-1022), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Magazine with zero or negative publication year
         //
         verifyException("ir.ramtung.impl1.Magazine", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Cannot find member to borrow", 14984);
      library0.addStudentMember("Cannot find member to borrow", "Cannot find member to borrow");
      library0.borrow("Cannot find member to borrow", "Cannot find member to borrow");
      library0.returnDocument("Cannot find member to borrow", "Cannot find member to borrow");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference("DQ5@C_2F0,fjr_U", 1761);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addBook("ir.ramtung.impl1.Document", (-445));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Negative or zero copies of a document cannot be added
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }
}
